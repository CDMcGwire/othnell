!function(){"use strict";const e=1602805297960,t="cache"+e,n=["/client/client.20a30278.js","/client/inject_styles.5607aec6.js","/client/index.979c3ef0.js","/client/Term.25ef3a3b.js","/client/index.d56d6551.js","/client/proficiencies.ecd97d11.js","/client/RefAdder.c71350d1.js","/client/RefAdder.03eb0397.js","/client/attributes.85a329f3.js","/client/index.6e9206da.js","/client/exceptional.d5eabef2.js","/client/attribute.d41c0fbc.js","/client/mundane.21721b0a.js","/client/races.156170c2.js","/client/index.06c239f2.js","/client/damage.819443aa.js","/client/about.29bf171b.js","/client/index.c4649b1c.js","/client/index.49351da9.js","/client/essence-weaving.d899bafe.js","/client/soul-binding.452ee320.js","/client/rule-of-law.dfc82dcb.js","/client/thaumaturgy.684737b4.js","/client/veneration.782ec395.js","/client/hemoturgy.01e7fb85.js","/client/energeia.83740bef.js","/client/animare.a1a5fab4.js","/client/index.fb9c3c65.js","/client/index.77f6fe2d.js","/client/index.a85649fd.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
