!function(){"use strict";const e=1612982649002,t="cache"+e,n=["/client/client.f34d1a9b.js","/client/inject_styles.5607aec6.js","/client/index.d0a210af.js","/client/Term.59e31d9f.js","/client/index.8494f013.js","/client/proficiencies.bb1fcab9.js","/client/RefAdder.95a862c6.js","/client/RefAdder.03eb0397.js","/client/attributes.2a4ca077.js","/client/index.110b4466.js","/client/exceptional.70c69fbe.js","/client/attribute.62f30029.js","/client/mundane.e39d8e35.js","/client/races.b91b11b8.js","/client/index.2fce96e8.js","/client/damage.e0cc5a1a.js","/client/about.a3834cb8.js","/client/index.fa9068f7.js","/client/index.e3655500.js","/client/essence-weaving.73116e48.js","/client/soul-binding.6c6b73f7.js","/client/rule-of-law.5639aabe.js","/client/thaumaturgy.2232992e.js","/client/veneration.25849b8c.js","/client/hemoturgy.90bf6c84.js","/client/energeia.1ced5c69.js","/client/animare.9d206a95.js","/client/index.b3706ad4.js","/client/index.3d50d355.js","/client/index.6acf7402.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
