!function(){"use strict";const e=1602790449253,t="cache"+e,n=["/client/client.fff3bf11.js","/client/inject_styles.5607aec6.js","/client/index.607d2ab3.js","/client/Term.3002753b.js","/client/index.35435325.js","/client/proficiencies.ed93e4a1.js","/client/RefAdder.d6e6bcc7.js","/client/RefAdder.03eb0397.js","/client/attributes.5f9015e1.js","/client/index.dfe718d4.js","/client/exceptional.4ec250bd.js","/client/attribute.6f9378ce.js","/client/mundane.07007bda.js","/client/races.d00b997c.js","/client/index.41f4f313.js","/client/damage.a0ccb038.js","/client/about.f3de5f5d.js","/client/index.3fd66d63.js","/client/index.cbedb7fc.js","/client/essence-weaving.bb507774.js","/client/soul-binding.8f074927.js","/client/rule-of-law.7320a6b2.js","/client/thaumaturgy.a3920417.js","/client/veneration.af8ac097.js","/client/hemoturgy.a59a2300.js","/client/energeia.7ead4369.js","/client/animare.4e8ed07a.js","/client/index.1bd40839.js","/client/index.09f891bf.js","/client/index.9a40033d.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
