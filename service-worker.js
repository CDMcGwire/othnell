!function(){"use strict";const e=1612316319557,t="cache"+e,n=["/client/client.7b900e8b.js","/client/inject_styles.5607aec6.js","/client/index.cfe0217d.js","/client/Term.25fa01e5.js","/client/index.432a1292.js","/client/proficiencies.fcd2f2bc.js","/client/RefAdder.ca3976a2.js","/client/RefAdder.03eb0397.js","/client/attributes.ccd92549.js","/client/index.4908577a.js","/client/exceptional.71c9941e.js","/client/attribute.b23e05db.js","/client/mundane.dd199ea0.js","/client/races.48e64daa.js","/client/index.ec1663ab.js","/client/damage.a1250e1c.js","/client/about.15e7873a.js","/client/index.30d5e24a.js","/client/index.dafce1b4.js","/client/essence-weaving.9f0cb4f3.js","/client/soul-binding.9ce42501.js","/client/rule-of-law.f61aaefb.js","/client/thaumaturgy.9d6a05e8.js","/client/veneration.fe8c3bd3.js","/client/hemoturgy.824a61dc.js","/client/energeia.2be8ddc7.js","/client/animare.0a2e7538.js","/client/index.8c3dac89.js","/client/index.d7ee2514.js","/client/index.de507178.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
