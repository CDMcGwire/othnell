!function(){"use strict";const e=1613080829985,t="cache"+e,n=["/client/client.45998b2c.js","/client/inject_styles.5607aec6.js","/client/index.cf4071a8.js","/client/Term.93a49a29.js","/client/index.80ec47ee.js","/client/proficiencies.9c15f764.js","/client/RefAdder.c754e58f.js","/client/RefAdder.03eb0397.js","/client/attributes.db4e3f1f.js","/client/index.78cbd631.js","/client/exceptional.c94f252f.js","/client/attribute.7bda9ff7.js","/client/mundane.d7676932.js","/client/races.785323fa.js","/client/index.9eed5018.js","/client/damage.04246fea.js","/client/about.9e567810.js","/client/index.a057538d.js","/client/index.67a1da93.js","/client/essence-weaving.e164970e.js","/client/soul-binding.8ab893de.js","/client/rule-of-law.376a916e.js","/client/thaumaturgy.a54db61d.js","/client/veneration.807747c1.js","/client/hemoturgy.3c7871ad.js","/client/energeia.167aa2bc.js","/client/animare.50841399.js","/client/index.e588e723.js","/client/index.7dc38a7c.js","/client/index.73c23996.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
