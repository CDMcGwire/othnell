!function(){"use strict";const e=1602806149356,t="cache"+e,n=["/client/client.91a495f0.js","/client/inject_styles.5607aec6.js","/client/index.57b84e8d.js","/client/Term.ae9dc949.js","/client/index.b65554ab.js","/client/proficiencies.ddba18bb.js","/client/RefAdder.17ae4a02.js","/client/RefAdder.03eb0397.js","/client/attributes.9399e480.js","/client/index.b54924a4.js","/client/exceptional.b0f239ec.js","/client/attribute.c9503576.js","/client/mundane.79ec1068.js","/client/races.c6fc7958.js","/client/index.ad9352f0.js","/client/damage.e650d5d5.js","/client/about.47d23ac5.js","/client/index.bbd4c9d0.js","/client/index.10d2a21a.js","/client/essence-weaving.d338dcbf.js","/client/soul-binding.a795cb24.js","/client/rule-of-law.a9350da9.js","/client/thaumaturgy.6095b7e1.js","/client/veneration.3f152ffe.js","/client/hemoturgy.f915a4c5.js","/client/energeia.f68252d9.js","/client/animare.59c324ce.js","/client/index.aef5f8f0.js","/client/index.e95a772d.js","/client/index.55ef25d7.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
