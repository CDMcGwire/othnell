!function(){"use strict";const e=1602798427597,t="cache"+e,n=["/client/client.8cad0b66.js","/client/inject_styles.5607aec6.js","/client/index.0cefcab1.js","/client/Term.94bec498.js","/client/index.8e40e071.js","/client/proficiencies.c93f6a60.js","/client/RefAdder.2fc80a8d.js","/client/RefAdder.03eb0397.js","/client/attributes.2f8977e4.js","/client/index.d1fd6d48.js","/client/exceptional.3d13ebc1.js","/client/attribute.042245e1.js","/client/mundane.aa28b3df.js","/client/races.cf49a690.js","/client/index.7e4e24f2.js","/client/damage.a75a4bcd.js","/client/about.88912626.js","/client/index.2bbea579.js","/client/index.534aaf75.js","/client/essence-weaving.ae2dc120.js","/client/soul-binding.aea018d6.js","/client/rule-of-law.2b76befc.js","/client/thaumaturgy.8de0b41d.js","/client/veneration.4321b2ba.js","/client/hemoturgy.0b91b9fd.js","/client/energeia.9a41d276.js","/client/animare.8c6d2488.js","/client/index.cf2b74d4.js","/client/index.6d55b94f.js","/client/index.72ec75a5.js"].concat(["/service-worker-index.html","/CNAME","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json","/ref/proficiencies/thaumaturgy.html","/ref/traits/exceptional/iron-stomach.html","/ref/traits/mundane/inspiring.html","/terms/attr-brawn.html","/terms/attr-charisma.html","/terms/attr-memory.html","/terms/attr-poise.html","/terms/attr-wit.html","/terms/clash-roll.html","/terms/demo-term.html","/terms/demo.html","/terms/empty.html"]),s=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&s.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline"+e).then((async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const s=await e.match(t.request);if(s)return s;throw n}})))))}))}();
